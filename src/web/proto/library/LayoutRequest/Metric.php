<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: genetic.proto

namespace LayoutRequest;

use UnexpectedValueException;

/**
 * Protobuf type <code>LayoutRequest.Metric</code>
 */
class Metric
{
    /**
     * Generated from protobuf enum <code>WEIGHT_OPTIMIZATION = 0;</code>
     */
    const WEIGHT_OPTIMIZATION = 0;
    /**
     * Generated from protobuf enum <code>TIME_SPACE_OPTIMIZATION = 1;</code>
     */
    const TIME_SPACE_OPTIMIZATION = 1;
    /**
     * Generated from protobuf enum <code>MINIMIZE_ERRORS = 2;</code>
     */
    const MINIMIZE_ERRORS = 2;
    /**
     * Generated from protobuf enum <code>HARDWARE_OPTIMIZATION = 3;</code>
     */
    const HARDWARE_OPTIMIZATION = 3;

    private static $valueToName = [
        self::WEIGHT_OPTIMIZATION => 'WEIGHT_OPTIMIZATION',
        self::TIME_SPACE_OPTIMIZATION => 'TIME_SPACE_OPTIMIZATION',
        self::MINIMIZE_ERRORS => 'MINIMIZE_ERRORS',
        self::HARDWARE_OPTIMIZATION => 'HARDWARE_OPTIMIZATION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Metric::class, \LayoutRequest_Metric::class);

